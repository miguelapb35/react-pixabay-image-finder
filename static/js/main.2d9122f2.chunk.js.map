{"version":3,"sources":["components/navbar/NavBar.js","components/image-results/ImageResults.js","components/search/Search.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","title","ImageResults","state","open","currentImg","handleOpen","img","setState","handleClose","imageListContent","images","this","props","GridList","cols","map","tags","key","id","subtitle","user","actionIcon","onClick","largeImageURL","color","src","alt","actions","label","primary","modal","onRequestClose","style","width","Component","Search","searchText","amount","apiUrl","apiKey","onTextChange","e","val","target","value","name","axios","get","then","res","data","hits","catch","err","console","log","onAmountChange","index","onChange","floatingLabelText","fullWidth","primaryText","length","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.2d9122f2.chunk.js","sourcesContent":["import React from 'react';\r\nimport AppBar from 'material-ui/AppBar'\r\n\r\nconst NavBar = () => <AppBar title='PixaBay Image Finder' />\r\n\r\nexport default NavBar;\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { GridList, GridTile } from 'material-ui/GridList'\r\nimport IconButton from 'material-ui/IconButton'\r\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in'\r\nimport Dialog from 'material-ui/Dialog'\r\nimport FlatButton from 'material-ui/FlatButton'\r\n\r\n\r\n\r\nclass ImageResults extends Component {\r\n  state = { \r\n    open: false,\r\n    currentImg: ''\r\n  }\r\n\r\n  handleOpen = img => {\r\n    this.setState({ open: true, currentImg: img });\r\n  }\r\n  handleClose = () => {\r\n    this.setState({ open: false });\r\n  }\r\n    \r\n  render() { \r\n    let imageListContent;\r\n    const { images } = this.props;\r\n    if (images) {\r\n      imageListContent = (\r\n        <GridList cols={3}>\r\n          {images.map(img => (\r\n            <GridTile\r\n              title={img.tags}\r\n              key={img.id}\r\n              subtitle={\r\n                <span>\r\n                  by <strong> {img.user} </strong>\r\n                </span>\r\n              }\r\n              actionIcon={\r\n                <IconButton\r\n                  onClick={() => this.handleOpen(img.largeImageURL)}\r\n                >\r\n                  <ZoomIn color='white' />\r\n                </IconButton>\r\n              }\r\n            >\r\n              <img src={img.largeImageURL} alt=\"image\"/>\r\n            </GridTile>\r\n          ))}\r\n        </GridList>\r\n      )\r\n    } else {\r\n      imageListContent = null;\r\n    }\r\n\r\n    const actions = [\r\n      <FlatButton\r\n        label='Close'\r\n        primary={true}\r\n        onClick={this.handleClose} \r\n        />\r\n    ]\r\n\r\n    return ( \r\n      <div>\r\n        {imageListContent}\r\n        <Dialog \r\n          actions={actions}\r\n          modal={false}\r\n          open={this.state.open}\r\n          onRequestClose={this.handleClose}\r\n        >\r\n          <img src={this.state.currentImg}\r\n            alt=\"img\"\r\n            style={{ width: '100%' }}\r\n\r\n          />\r\n        </Dialog>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nImageResults.propTypes = {\r\n  images: PropTypes.array.isRequired\r\n}\r\n\r\nexport default ImageResults;","import React, { Component } from 'react'\r\nimport TextField from 'material-ui/TextField'\r\nimport SelectField from 'material-ui/SelectField'\r\nimport MenuItem from 'material-ui/MenuItem'\r\nimport axios from 'axios'\r\nimport ImageResults from '../image-results/ImageResults'\r\n\r\nclass Search extends Component {\r\n  state = {\r\n    searchText: '',\r\n    amount: 15,\r\n    apiUrl: 'https://pixabay.com/api',\r\n    apiKey: '18719829-ddd4be5a1b7a38553bb46fe17',\r\n    images: []\r\n  };\r\n\r\n  onTextChange = e => {\r\n    const val = e.target.value;\r\n    this.setState({ [e.target.name]: val }, () => {\r\n      if (val === '') {\r\n        this.setState({ images: [] });\r\n      } else {\r\n        axios\r\n          .get(\r\n            `${this.state.apiUrl}/?key=${this.state.apiKey}&q=${\r\n              this.state.searchText\r\n            }&image_type=photo&per_page=${this.state.amount}&safesearch=true`\r\n          )\r\n          .then(res => this.setState({ images: res.data.hits }))\r\n          .catch(err => console.log(err));\r\n      }\r\n    });\r\n  };\r\n\r\n  onAmountChange = (e, index, value) => this.setState({ amount: value })\r\n  \r\n\r\n\r\n\r\n  render() {\r\n    console.log(this.state.images);\r\n    return (\r\n      <div>\r\n        <TextField \r\n          name='searchText'\r\n          value={this.state.searchText}\r\n          onChange={this.onTextChange}\r\n          floatingLabelText='Suche nach Bilern'\r\n          fullWidth={true}\r\n        />\r\n        <br />\r\n        <SelectField\r\n          name='amount'\r\n          floatingLabelText='Menge'\r\n          value={this.state.amount}\r\n          onChange={this.onAmountChange}\r\n        >\r\n          <MenuItem value={5} primaryText='5' />  \r\n          <MenuItem value={10} primaryText='10' />  \r\n          <MenuItem value={15} primaryText='15' />  \r\n          <MenuItem value={30} primaryText='30' />  \r\n          <MenuItem value={50} primaryText='50' />  \r\n        </SelectField>\r\n        <br />\r\n        {this.state.images.length > 0 ? (<ImageResults images={this.state.images} />) : null}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Search","import React, {Component} from 'react';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider'\nimport './App.css';\nimport NavBar from './components/navbar/NavBar'\nimport Search from './components/search/Search'\n\nclass App extends Component {\n  render() {\n    return (\n    <MuiThemeProvider>\n      <div>\n          <NavBar />\n          <Search />\n      </div>\n    </MuiThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}